is.na(selfinc) ~ TRUE,
# exclude all other cases
TRUE ~ FALSE))
## CPI ##
cpi <- read.csv(here("data/cpi_annual.csv"))
cpi_base <- cpi$cpiurs[cpi$year == current_year]
cpi_wage <- cpi$cpiurs[cpi$year == 2023]
#### MASTER WAGE DATASET ####
# master wage dataset
wage_master <- data %>%
# merge CPI-U-RS
left_join(cpi, by = "year") %>%
# inflation adjust wages to current years dollars
mutate(realwage = wage * (cpi_base/cpiurs),
adj_wage = wage * (cpi_wage/cpiurs)) %>%
# flatten labels and adjust weight variables
mutate(# annual weight adjustment
wgt = case_when(
# may data wgt ~ finalwgt
year < 1979 ~ finalwgt,
year >= 1979 ~ orgwgt/12))%>%
arrange(year)
wage_master_no_imputed <- data %>%
# merge CPI-U-RS
left_join(cpi, by = "year") %>%
filter(!(a_earnhour == 1 & !is.na(a_earnhour)),
!(a_weekpay == 1 & !is.na(a_weekpay))) %>%
# inflation adjust wages to current years dollars
mutate(realwage = wage * (cpi_base/cpiurs),
adj_wage = wage * (cpi_wage/cpiurs)) %>%
# flatten labels and adjust weight variables
mutate(# annual weight adjustment
wgt = case_when(
# may data wgt ~ finalwgt
year < 1979 ~ finalwgt,
year >= 1979 ~ orgwgt/12))%>%
arrange(year)
wage_growth <- data.frame()
for (percentile in seq(6, 94, by = 1)) {
new_method <- wage_master %>%
filter(year %in% c(2010, 2015)) %>%
group_by(year) %>%
summarize(
p46 = weighted_quantile(adj_wage, finalwgt, probs = (percentile - 4) / 100),
p47 = weighted_quantile(adj_wage, finalwgt, probs = (percentile - 3) / 100),
p48 = weighted_quantile(adj_wage, finalwgt, probs = (percentile - 2) / 100),
p49 = weighted_quantile(adj_wage, finalwgt, probs = (percentile - 1) / 100),
p50 = weighted_quantile(adj_wage, finalwgt, probs = percentile / 100),
p51 = weighted_quantile(adj_wage, finalwgt, probs = (percentile + 1) / 100),
p52 = weighted_quantile(adj_wage, finalwgt, probs = (percentile + 2) / 100),
p53 = weighted_quantile(adj_wage, finalwgt, probs = (percentile + 3) / 100),
p54 = weighted_quantile(adj_wage, finalwgt, probs = (percentile + 4) / 100)
) %>%
rowwise() %>%
mutate(
weighted_avg_p = sum(
c(p46, p47, p48, p49, p50, p51, p52, p53, p54) *
c(1/25, 2/25, 3/25, 4/25, 5/25, 4/25, 3/25, 2/25, 1/25),
na.rm = TRUE)
) %>%
select(year, p50, weighted_avg_p)
current_method <- wage_master %>%
binipolate( var = wage, p = percentile, .by = "year", 0.25, w = finalwgt) %>%
left_join(cpi, by = "year") %>%
mutate(adjwage = wage * (cpi_base/cpiurs)) %>%
filter(year %in% c(2010, 2015)) %>%
select(year,adjwage)
methods <- new_method %>%
left_join(current_method, by= "year")
# Append results for each percentile to the results dataframe
wage_growth <- bind_rows(wage_growth, methods)
}
wage_growth <- wage_growth %>%
mutate(
standard = if_else(
row_number() %% 2 == 0 & row_number() <= 178,
(p50 / lag(p50)) - 1,
NA_real_
),
weighted_average = if_else(
row_number() %% 2 == 0 & row_number() <= 178,
(weighted_avg_p / lag(weighted_avg_p)) - 1,
NA_real_
),
binipolate = if_else(
row_number() %% 2 == 0 & row_number() <= 178,
(adjwage/lag(adjwage)) - 1,
NA_real_
)
)
wage_growth <- wage_growth %>%
filter(year == 2015) %>%
rename(percentile = year) %>%
select(percentile, standard, weighted_average, binipolate) %>%
mutate(percentile = row_number() + 5) %>%
mutate(
weighted_average = if_else(percentile >= 10 & percentile <= 90, weighted_average, NA_real_),
binipolate = if_else(percentile >= 10 & percentile <= 90, binipolate, NA_real_)
)
long_wage_growth <- wage_growth %>%
pivot_longer(
cols = c(standard, weighted_average, binipolate),
names_to = "series",
values_to = "values"
)
wage_growth_plot <- ggplot(long_wage_growth, aes(x = percentile, y = values, color = series, group = series)) +
geom_line(size = 1.3, alpha =0.7) +                     # Increase line size
geom_point(size = 3, alpha =0.7 ) +
scale_color_manual(values = c("#1f77b4", "#ff7f0e", "#2ca02c")) +  # Distinct colors
scale_shape_manual(values = c(16, 17, 18)) + # Increase point size
labs(
title = "Real Wage Growth 2019-2023 by Percentile Smoothing Method",
x = "Percentile",
y = "2019-2023 Real Wage Growth (2023$)",
color = "Methods:"
) +                                         # Add labels
theme_light(base_size = 14) +               # Use a light theme with larger base font size
theme(
plot.background = element_rect(fill = "white", color = NA),   # Light background
panel.background = element_rect(fill = "white"),              # Light panel
text = element_text(color = "black"),                         # Black text color
plot.title = element_text(hjust = 0.5),                       # Center title
legend.position = "top",                                      # Position legend at the top
panel.grid.major = element_line(color = "grey80"),
panel.grid.minor = element_blank()                            # Remove minor gridlines
) +
scale_y_continuous(breaks = seq(floor(-0.1), ceiling(0.16), by = 0.02), limits = c(-.1,0.16), labels = label_percent())+
scale_x_continuous(breaks = seq(floor(5), ceiling(95), by = 5))+
labs(y = NULL)# Use a color palette
# Save the plot
ggsave("output/wage_growth.png", plot = wage_growth_plot, width = 10, height = 6, dpi = 300)
wage_growth <- data.frame()
for (percentile in seq(6, 94, by = 1)) {
new_method <- wage_master %>%
filter(year %in% c(2010, 2015)) %>%
group_by(year) %>%
summarize(
p46 = weighted_quantile(adj_wage, finalwgt, probs = (percentile - 4) / 100),
p47 = weighted_quantile(adj_wage, finalwgt, probs = (percentile - 3) / 100),
p48 = weighted_quantile(adj_wage, finalwgt, probs = (percentile - 2) / 100),
p49 = weighted_quantile(adj_wage, finalwgt, probs = (percentile - 1) / 100),
p50 = weighted_quantile(adj_wage, finalwgt, probs = percentile / 100),
p51 = weighted_quantile(adj_wage, finalwgt, probs = (percentile + 1) / 100),
p52 = weighted_quantile(adj_wage, finalwgt, probs = (percentile + 2) / 100),
p53 = weighted_quantile(adj_wage, finalwgt, probs = (percentile + 3) / 100),
p54 = weighted_quantile(adj_wage, finalwgt, probs = (percentile + 4) / 100)
) %>%
rowwise() %>%
mutate(
weighted_avg_p = sum(
c(p46, p47, p48, p49, p50, p51, p52, p53, p54) *
c(1/25, 2/25, 3/25, 4/25, 5/25, 4/25, 3/25, 2/25, 1/25),
na.rm = TRUE)
) %>%
select(year, p50, weighted_avg_p)
current_method <- wage_master %>%
binipolate( var = wage, p = percentile, .by = "year", 0.25, w = finalwgt) %>%
left_join(cpi, by = "year") %>%
mutate(adjwage = wage * (cpi_base/cpiurs)) %>%
filter(year %in% c(2010, 2015)) %>%
select(year,adjwage)
methods <- new_method %>%
left_join(current_method, by= "year")
# Append results for each percentile to the results dataframe
wage_growth <- bind_rows(wage_growth, methods)
}
binipolate <- function(data, var, p = 50, .by = NULL, binsize, w = 1, classical = FALSE) {
# Check binsize and throw an error if it's less than or equal to 0
if (binsize <= 0) {
stop("binsize must be greater than 0.")
}
# Check data for observations
if(nrow(data) == 0) {
stop("no observations, please check sample")
}
# calculate binned interpolated percentiles
if(classical == FALSE) {
# cumulative distribution function
#note: CDF will be used to approximate closest bins around desired percentile
CDF <- data %>%
filter(!is.na({{ var }})) %>%
# calculate bin values across groups
mutate(binvalue = floor(({{ var }} - binsize/2)/binsize) * binsize + binsize + binsize/2) %>%
# sum of weights by grouping and bin
summarise(sum = sum({{ w }}, na.rm = TRUE), .by = c({{ .by }}, binvalue)) %>%
# running sum of weights by grouping and bin
arrange(across(c({{ .by }}, binvalue)))  %>% mutate(runningsum = cumsum(sum), .by = {{ .by }}) %>%
mutate(totalsum = sum(sum, na.rm = TRUE), cdf = runningsum/totalsum, .by = {{ .by }}) %>%
# count number of bins by grouping
mutate(binnumber = seq_along(binvalue), .by = {{ .by }})
#return(CDF)
# identify maximum number of bins within given percentile breaks
#note: example, p = 50 ~ max(binnumber) == 90
map(p, ~ CDF %>% filter(cdf <= .x / 100) %>%
summarise(below = max(binnumber, na.rm = TRUE), .by = {{ .by }}) %>%
mutate(p = .x)) %>%
reduce(bind_rows) %>%
# merge with binned data
left_join(CDF, by = names(select(., {{ .by }})), relationship = "many-to-many") %>%
# within each group, filter out to the bin break or bin break + 1
filter(binnumber == below | binnumber == (below + 1), .by = c({{ .by }}, p)) %>%
# calculate percentiles
mutate("{{ var }}" :=  binvalue + (lead(binvalue, 1) - binvalue) * ((p/100 - cdf) / (lead(cdf, 1) - cdf)), .by = c({{ .by }}, p)) %>%
filter(!is.na({{ var }})) %>%
select({{ .by }}, {{ var }}, p) %>%
mutate(across(.cols = where(~ sjlabelled::is_labelled(.) && !is.character(.)), ~ as.character(as_factor(.x)))) %>%
arrange(across(c({{ .by }}, p)))
}
# calculate classical weighted quantile
else {
reframe(data,
p = p,
"{{ var }}" := MetricsWeighted::weighted_quantile({{ var }}, probs = c(p/100), w = {{ w }}), .by = {{ .by }}) %>%
# select relevant variables
select({{ .by }}, {{var}}, p) %>%
# arrange variables
arrange(across(c({{ .by }}, p)))
}
}
wage_growth <- data.frame()
for (percentile in seq(6, 94, by = 1)) {
new_method <- wage_master %>%
filter(year %in% c(2010, 2015)) %>%
group_by(year) %>%
summarize(
p46 = weighted_quantile(adj_wage, finalwgt, probs = (percentile - 4) / 100),
p47 = weighted_quantile(adj_wage, finalwgt, probs = (percentile - 3) / 100),
p48 = weighted_quantile(adj_wage, finalwgt, probs = (percentile - 2) / 100),
p49 = weighted_quantile(adj_wage, finalwgt, probs = (percentile - 1) / 100),
p50 = weighted_quantile(adj_wage, finalwgt, probs = percentile / 100),
p51 = weighted_quantile(adj_wage, finalwgt, probs = (percentile + 1) / 100),
p52 = weighted_quantile(adj_wage, finalwgt, probs = (percentile + 2) / 100),
p53 = weighted_quantile(adj_wage, finalwgt, probs = (percentile + 3) / 100),
p54 = weighted_quantile(adj_wage, finalwgt, probs = (percentile + 4) / 100)
) %>%
rowwise() %>%
mutate(
weighted_avg_p = sum(
c(p46, p47, p48, p49, p50, p51, p52, p53, p54) *
c(1/25, 2/25, 3/25, 4/25, 5/25, 4/25, 3/25, 2/25, 1/25),
na.rm = TRUE)
) %>%
select(year, p50, weighted_avg_p)
current_method <- wage_master %>%
binipolate( var = wage, p = percentile, .by = "year", 0.25, w = finalwgt) %>%
left_join(cpi, by = "year") %>%
mutate(adjwage = wage * (cpi_base/cpiurs)) %>%
filter(year %in% c(2010, 2015)) %>%
select(year,adjwage)
methods <- new_method %>%
left_join(current_method, by= "year")
# Append results for each percentile to the results dataframe
wage_growth <- bind_rows(wage_growth, methods)
}
# Define a custom function to calculate weighted quantiles without interpolation
weighted_quantile <- function(values, weights, probs) {
# Order values and weights based on the values
order <- order(values)
values <- values[order]
weights <- weights[order]
# Calculate cumulative weights
cum_weights <- cumsum(weights) / sum(weights)
# What is the percentile we are looking for
percentiles <- numeric(length(probs))
# Find the percentile
for (i in seq_along(probs)) {
# Identify the first value where cumulative weight exceeds the percentile
percentiles[i] <- values[which(cum_weights >= probs[i])[1]]
}
return(percentiles)
}
# Define a custom function to calculate weighted quantiles without interpolation
weighted_quantile <- function(values, weights, probs) {
# Order values and weights based on the values
order <- order(values)
values <- values[order]
weights <- weights[order]
# Calculate cumulative weights
cum_weights <- cumsum(weights) / sum(weights)
# What is the percentile we are looking for
percentiles <- numeric(length(probs))
# Find the percentile
for (i in seq_along(probs)) {
# Identify the first value where cumulative weight exceeds the percentile
percentiles[i] <- values[which(cum_weights >= probs[i])[1]]
}
return(percentiles)
}
wage_growth <- data.frame()
for (percentile in seq(6, 94, by = 1)) {
new_method <- wage_master %>%
filter(year %in% c(2010, 2015)) %>%
group_by(year) %>%
summarize(
p46 = weighted_quantile(adj_wage, finalwgt, probs = (percentile - 4) / 100),
p47 = weighted_quantile(adj_wage, finalwgt, probs = (percentile - 3) / 100),
p48 = weighted_quantile(adj_wage, finalwgt, probs = (percentile - 2) / 100),
p49 = weighted_quantile(adj_wage, finalwgt, probs = (percentile - 1) / 100),
p50 = weighted_quantile(adj_wage, finalwgt, probs = percentile / 100),
p51 = weighted_quantile(adj_wage, finalwgt, probs = (percentile + 1) / 100),
p52 = weighted_quantile(adj_wage, finalwgt, probs = (percentile + 2) / 100),
p53 = weighted_quantile(adj_wage, finalwgt, probs = (percentile + 3) / 100),
p54 = weighted_quantile(adj_wage, finalwgt, probs = (percentile + 4) / 100)
) %>%
rowwise() %>%
mutate(
weighted_avg_p = sum(
c(p46, p47, p48, p49, p50, p51, p52, p53, p54) *
c(1/25, 2/25, 3/25, 4/25, 5/25, 4/25, 3/25, 2/25, 1/25),
na.rm = TRUE)
) %>%
select(year, p50, weighted_avg_p)
current_method <- wage_master %>%
binipolate( var = wage, p = percentile, .by = "year", 0.25, w = finalwgt) %>%
left_join(cpi, by = "year") %>%
mutate(adjwage = wage * (cpi_base/cpiurs)) %>%
filter(year %in% c(2010, 2015)) %>%
select(year,adjwage)
methods <- new_method %>%
left_join(current_method, by= "year")
# Append results for each percentile to the results dataframe
wage_growth <- bind_rows(wage_growth, methods)
}
wage_growth <- wage_growth %>%
mutate(
standard = if_else(
row_number() %% 2 == 0 & row_number() <= 178,
(p50 / lag(p50)) - 1,
NA_real_
),
weighted_average = if_else(
row_number() %% 2 == 0 & row_number() <= 178,
(weighted_avg_p / lag(weighted_avg_p)) - 1,
NA_real_
),
binipolate = if_else(
row_number() %% 2 == 0 & row_number() <= 178,
(adjwage/lag(adjwage)) - 1,
NA_real_
)
)
wage_growth <- wage_growth %>%
filter(year == 2015) %>%
rename(percentile = year) %>%
select(percentile, standard, weighted_average, binipolate) %>%
mutate(percentile = row_number() + 5) %>%
mutate(
weighted_average = if_else(percentile >= 10 & percentile <= 90, weighted_average, NA_real_),
binipolate = if_else(percentile >= 10 & percentile <= 90, binipolate, NA_real_)
)
long_wage_growth <- wage_growth %>%
pivot_longer(
cols = c(standard, weighted_average, binipolate),
names_to = "series",
values_to = "values"
)
wage_growth_plot <- ggplot(long_wage_growth, aes(x = percentile, y = values, color = series, group = series)) +
geom_line(size = 1.3, alpha =0.7) +                     # Increase line size
geom_point(size = 3, alpha =0.7 ) +
scale_color_manual(values = c("#1f77b4", "#ff7f0e", "#2ca02c")) +  # Distinct colors
scale_shape_manual(values = c(16, 17, 18)) + # Increase point size
labs(
title = "Real Wage Growth 2019-2023 by Percentile Smoothing Method",
x = "Percentile",
y = "2019-2023 Real Wage Growth (2023$)",
color = "Methods:"
) +                                         # Add labels
theme_light(base_size = 14) +               # Use a light theme with larger base font size
theme(
plot.background = element_rect(fill = "white", color = NA),   # Light background
panel.background = element_rect(fill = "white"),              # Light panel
text = element_text(color = "black"),                         # Black text color
plot.title = element_text(hjust = 0.5),                       # Center title
legend.position = "top",                                      # Position legend at the top
panel.grid.major = element_line(color = "grey80"),
panel.grid.minor = element_blank()                            # Remove minor gridlines
) +
scale_y_continuous(breaks = seq(floor(-0.1), ceiling(0.16), by = 0.02), limits = c(-.1,0.16), labels = label_percent())+
scale_x_continuous(breaks = seq(floor(5), ceiling(95), by = 5))+
labs(y = NULL)# Use a color palette
# Save the plot
ggsave("output/wage_growth.png", plot = wage_growth_plot, width = 10, height = 6, dpi = 300)
wage_growth_plot <- ggplot(long_wage_growth, aes(x = percentile, y = values, color = series, group = series)) +
geom_line(size = 1.3, alpha =0.7) +                     # Increase line size
geom_point(size = 3, alpha =0.7 ) +
scale_color_manual(values = c("#1f77b4", "#ff7f0e", "#2ca02c")) +  # Distinct colors
scale_shape_manual(values = c(16, 17, 18)) + # Increase point size
labs(
title = "Real Wage Growth 2010-2015 by Percentile Smoothing Method",
x = "Percentile",
y = "2019-2023 Real Wage Growth (2023$)",
color = "Methods:"
) +                                         # Add labels
theme_light(base_size = 14) +               # Use a light theme with larger base font size
theme(
plot.background = element_rect(fill = "white", color = NA),   # Light background
panel.background = element_rect(fill = "white"),              # Light panel
text = element_text(color = "black"),                         # Black text color
plot.title = element_text(hjust = 0.5),                       # Center title
legend.position = "top",                                      # Position legend at the top
panel.grid.major = element_line(color = "grey80"),
panel.grid.minor = element_blank()                            # Remove minor gridlines
) +
scale_y_continuous(breaks = seq(floor(-0.1), ceiling(0.16), by = 0.02), limits = c(-.1,0.16), labels = label_percent())+
scale_x_continuous(breaks = seq(floor(5), ceiling(95), by = 5))+
labs(y = NULL)# Use a color palette
# Save the plot
ggsave("output/wage_growth.png", plot = wage_growth_plot, width = 10, height = 6, dpi = 300)
library(realtalk)
library(epiextractr)
library(tidyverse)
library(here)
library(epidatatools)
library(MetricsWeighted)
library(fixest)
library(bea.R)
library(blsR)
library(data.table)
library(formattable)
library(dplyr)
library(patchwork)
library(scales)
current_year <- 2023
var_list <- c("year", "month", "selfemp", "selfinc", "age", "wage",
"emp", "tc_weekpay", "lfstat",
"ptecon", "discwork", "unemp", "unempdur", "lookdur", "nilf", "a_earnhour", "a_weekpay", "wbho")
#### DATA IMPORTATION ####
# Load data for the "may" period (pre-1978)
may <- load_may(1973:1978, all_of(c(var_list, "finalwgt"))) %>% mutate(sample = "may")
# Load Outgoing Rotation Group (ORG) data
org <- load_org(1979:current_year, all_of(c(var_list, "orgwgt", "finalwgt"))) %>% mutate(sample = "org")
# standard restrictions
data <- bind_rows(org, may)  %>%
# Age and selfemp restrictions
filter(selfemp == 0, age >= 16, !is.na(wage),
case_when(selfinc == 0 & !is.na(selfinc) ~ TRUE, # filter selfinc == 0 for year >= 1989
# keep any year that doesn't have selfinc (selfinc is NA)
is.na(selfinc) ~ TRUE,
# exclude all other cases
TRUE ~ FALSE))
## CPI ##
cpi <- read.csv(here("data/cpi_annual.csv"))
cpi_base <- cpi$cpiurs[cpi$year == current_year]
cpi_wage <- cpi$cpiurs[cpi$year == 2023]
#### MASTER WAGE DATASET ####
# master wage dataset
wage_master <- data %>%
# merge CPI-U-RS
left_join(cpi, by = "year") %>%
# inflation adjust wages to current years dollars
mutate(realwage = wage * (cpi_base/cpiurs),
adj_wage = wage * (cpi_wage/cpiurs)) %>%
# flatten labels and adjust weight variables
mutate(# annual weight adjustment
wgt = case_when(
# may data wgt ~ finalwgt
year < 1979 ~ finalwgt,
year >= 1979 ~ orgwgt/12))%>%
arrange(year)
wage_master_no_imputed <- data %>%
# merge CPI-U-RS
left_join(cpi, by = "year") %>%
filter(!(a_earnhour == 1 & !is.na(a_earnhour)),
!(a_weekpay == 1 & !is.na(a_weekpay))) %>%
# inflation adjust wages to current years dollars
mutate(realwage = wage * (cpi_base/cpiurs),
adj_wage = wage * (cpi_wage/cpiurs)) %>%
# flatten labels and adjust weight variables
mutate(# annual weight adjustment
wgt = case_when(
# may data wgt ~ finalwgt
year < 1979 ~ finalwgt,
year >= 1979 ~ orgwgt/12))%>%
arrange(year)
p = c(0.10, 0.50, 0.90)
ben_method <- wage_master %>%  reframe(
p,
averaged_value = averaged_quantile(wage, w = orgwgt, probs = p),
interpolated_value = interpolated_quantile(wage, w = orgwgt, bin_size = 0.25, probs = p),
classical_value = MetricsWeighted::weighted_quantile(wage, w = orgwgt, probs = p)
)
install.packages('epidatatools', repos = c('https://economic.r-universe.dev', 'https://cloud.r-project.org'))
install.packages("epidatatools", repos = c("https://economic.r-universe.dev", "https://cloud.r-project.org"))
p = c(0.10, 0.50, 0.90)
ben_method <- wage_master %>%  reframe(
p,
averaged_value = averaged_quantile(wage, w = orgwgt, probs = p),
interpolated_value = interpolated_quantile(wage, w = orgwgt, bin_size = 0.25, probs = p),
classical_value = MetricsWeighted::weighted_quantile(wage, w = orgwgt, probs = p)
)
?epidatatools
??epidatatools
library(realtalk)
library(epiextractr)
library(tidyverse)
library(here)
library(epidatatools)
library(MetricsWeighted)
library(fixest)
library(bea.R)
library(blsR)
library(data.table)
library(formattable)
library(dplyr)
library(patchwork)
library(scales)
ben_method <- wage_master %>%  reframe(
p,
averaged_value = averaged_quantile(wage, w = orgwgt, probs = p),
interpolated_value = interpolated_quantile(wage, w = orgwgt, bin_size = 0.25, probs = p),
classical_value = MetricsWeighted::weighted_quantile(wage, w = orgwgt, probs = p)
)
